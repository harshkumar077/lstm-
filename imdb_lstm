# from keras.preprocessing import sequence
# from keras.preprocessing.sequence import pad_sequences
# from keras.preprocessing.sequence import pad_sequences
# from keras.preprocessing.sequence import pad_sequences

from keras.utils import pad_sequences
from keras.models import Sequential
from keras.layers import Dense,Embedding
from keras.layers import LSTM
from keras.datasets import imdb
max_feature=20000
maxlength=80
batch_size=36

print("loading data")
(x_train,y_train),(x_test,y_test)=imdb.load_data(num_words=max_feature)
print(len(x_train))
print(len(x_test))
# x_train=sequence.pad_sequences(x_train,maxlen=maxlength)
# x_test=sequence.pad_sequences(x_test,maxlen=maxlength)
x_train = pad_sequences(x_train, maxlen=maxlength)
x_test = pad_sequences(x_test, maxlen=maxlength)
print("x_trainshape",x_train.shape)
print("x_testshape",x_test.shape)
model=Sequential()
model.add(Embedding(max_feature,128))
model.add(LSTM(128,dropout=0.2,recurrent_dropout=0.2,return_sequences=True))
model.add(LSTM(128,dropout=0.2,recurrent_dropout=0.2))
model.add(Dense(1,activation='sigmoid'))
model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])
model.fit(x_train,y_train,batch_size=batch_size,epochs=2,validation_data=(x_test,y_test))
model.predict(x_test)
score,acc=model.evaluate(x_test,y_test,batch_size=batch_size)
print("score si",score)
print("accuracy is",acc)




